include: "../snakemake/conf_encrypting-uploading.sk"


rule all:
    input: expand(DONE+"/filesTransferred-{dataset}.done", dataset=PROJECT_NAME)
    output: DONE+"/encrypted-upload.done"
    shell:
        """
            touch {output}
            echo "All the files have been encrypted and transferred!"
        """

### Get files names
checkpoint paths:
    input: CSV+"/Samples_Informations.csv"
    output: samples=CSV+"/All_files-names.txt", done=LOGS+"/done/paths.done"
    params: OUTPUT_PATH+"/"+PROJECT_NAME
    script: SRC_DIR+"/getPaths.R"
    
rule all_crypted: ### TODO check this cause i think it take too much inputs in case
    input: getNames
    output: DONE+"/filesCrypted.done"
    shell:
        """
            echo 'All files have been crypted'
            touch {output}
        """

def find_R1_R2(wildcards):
    import re
    plausible_inputs = PATHS[wildcards.sample]
    # plausible inputs will be both R1 and R2 or a single R1
    # we need to pass to ega_cryptor the right one
    if len(plausible_inputs) == 1:
        return plausible_inputs[0]
    else:
        # we want to select from the possible input the right R1/R2 that is listed in our wildcard.file
        for i in plausible_inputs:
            if re.search(wildcards.file, i) != None:
                return i

rule ega_cryptor:
    input: find_R1_R2
    output: OUTPUT_PATH+"/{dataset}/{sample}/{file}.gpg", 
            OUTPUT_PATH+"/{dataset}/{sample}/{file}.gpg.md5",
            OUTPUT_PATH+"/{dataset}/{sample}/{file}.md5"
    params: tool=EGA_CRYPTOR, outdir=OUTPUT_PATH+"/{dataset}/{sample}", threads=10
    log: LOGS+"/crypted/ega_cryptor-{dataset}_{sample}_{file}.log"
    shell:
        """
            if [ ! -d {params.outdir} ]; then
                mkdir -p {params.outdir}
            fi
            java -jar {params.tool} -i {input} -o {params.outdir} -t {params.threads} 2> {log}
        """

rule file_transfer:
    input:  filesList=CSV+"/All_files-names.txt", done=DONE+"/filesCrypted.done"
    output: touch(DONE+"/filesTransferred-{dataset}.done")
    params: user=EGA_USER, pwd=EGA_PWD, tool=FTP_TRANSFER, ega_box=EGA_BOX
    log: LOGS+"/filesTransferred-{dataset}.log"
    shell:
        """
            while read line; do
                python3 {params.tool} -i "$line" -c {params.ega_box} -u {params.user} -p {params.pwd} 2> {log}
            done < {input.filesList}
        """





### OLD PORTION ###
# rule all:
#     input: expand(DONE+"/file_transfer-{dataset}.done", dataset=PROJECT_NAME)
#     shell:
#         """
#             echo "All the files have been encrypted and transferred!"
#         """

# rule ega_cryptor:
#     input: lambda wildcards: PATHS[wildcards.sample]
#     output: OUTPUT_PATH+"/{dataset}/{sample}.gpg", 
#             OUTPUT_PATH+"/{dataset}/{sample}.gpg.md5",
#             OUTPUT_PATH+"/{dataset}/{sample}.md5",
#     params: tool=EGA_CRYPTOR, outdir=OUTPUT_PATH+"/{dataset}", threads=10
#     log: LOGS+"/crypted/ega_cryptor-{dataset}-{sample}.log"
#     shell:
#         """
#             if [ ! -d {params.outdir} ]; then
#                 mkdir -p {params.outdir}
#             fi

#             java -jar {params.tool} -i {input} -o {params.outdir} -t {params.threads} 2> {log}
#         """

# ### separare input da virgola e poi splittare nel .py per riottenere la lista
# ### Use ftp transfer through python
# rule file_transfer:
#     input: expand(OUTPUT_PATH + "/{{dataset}}/{sample}.gpg", sample=SAMPLES), 
#            expand(OUTPUT_PATH + "/{{dataset}}/{sample}.gpg.md5", sample=SAMPLES),
#            expand(OUTPUT_PATH + "/{{dataset}}/{sample}.md5", sample=SAMPLES)
#     output: touch(DONE+"/file_transfer-{dataset}.done")
#     params: user=EGA_USER, pwd=EGA_PWD, tool=FTP_TRANSFER, ega_box=EGA_BOX
#     log: LOGS + "/file_transfer-{dataset}.log"
#     shell:
#         """
#             python3 {params.tool} -i {input} -c {params.ega_box} -u {params.user} -p {params.pwd} 2> {log}
#         """
### OLD PORTION ###
