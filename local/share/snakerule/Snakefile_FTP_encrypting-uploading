include: "../snakemake/conf_encrypting-uploading.sk"

# ==========================================================================
#                             EGAsubmitter
# ==========================================================================
# This file is part of EGAsubmitter.
#
# EGAsubmitter is Free Software: you can redistribute it and/or modify it
# under the terms found in the LICENSE.rst file distributed
# together with this file.
#
# EGAsubmitter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ==========================================================================
# Author: Marco Viviani <marco.viviani@ircc.it>
# ==========================================================================
#                   Snakefile_FTP_encrypting-uploading
# This workflow manages the file encryption using EGAcryptor tool
# and their upload through FTP to user's EGA box
# ==========================================================================

# Internal rule chaining does not depend on empty/PHONY target files, but we keep the last one 
# generated by running the whole pipeline for clarity, so that a ls on dataset/encrypting-uploading/logs/ will 
# clearly indicate that the encryption/upload step is finished. We also use a dummy file for the 
# file_transfer rule where the end result is on the remote ftp server.
rule all:
    input: expand(DONE+"/filesTransferred-{dataset}.done", dataset=PROJECT_NAME)
    output: DONE+"/encrypted-upload.done"
    shell:
        """
            touch {output}
            echo "All the files have been encrypted and transferred!"
        """

### Create the list file to be used for EGA cryptor: this is a workaround to avoid shell input limit
checkpoint paths:
    input: tsv=CSV+"/Samples_Information_3cols.tsv"
    output: samples=CSV+"/All_files-names.txt"
    params: path=OUTPUT_PATH+"/"+PROJECT_NAME
    run:
        import pandas as pd
        
        path = params.path
        df = pd.read_csv(input.tsv, sep='\t', header=None)
        all = []
        for index, row in df.iterrows():
            all.append(path+"/"+row[0]+"/"+row[1]+".gpg")
            all.append(path+"/"+row[0]+"/"+row[1]+".gpg.md5")
            all.append(path+"/"+row[0]+"/"+row[1]+".md5")
        new = pd.DataFrame(all)
        new.to_csv(output.samples, header=None, index=None, sep='\t', mode='a')
    
rule all_crypted:
    input: getNames
    shell:
        """
            echo 'All files have been crypted'
        """

### EGA cryptor is the tool to encrypt each file and check md5: all three files created will be uploaded to EGA
rule ega_cryptor:
    input: find_R1_R2
    output: OUTPUT_PATH+"/"+PROJECT_NAME+"/{sample}/{file}.gpg", 
            OUTPUT_PATH+"/"+PROJECT_NAME+"/{sample}/{file}.gpg.md5",
            OUTPUT_PATH+"/"+PROJECT_NAME+"/{sample}/{file}.md5"
    params: tool=EGA_CRYPTOR, outdir=OUTPUT_PATH+"/"+PROJECT_NAME+"/{sample}"
    log: LOGS+"/crypted/ega_cryptor-"+PROJECT_NAME+"_{sample}_{file}.log"
    shell:
        """
            if [ ! -d {params.outdir} ]; then
                mkdir -p {params.outdir}
            fi  
            java -jar {params.tool} -i {input} -o {params.outdir} &> {log}
        """

### File transfer using FTP module
# Here we resort to touching a final empty output file/PHONY for the sake of clarity. 
# We depend on a .gpg only considering that ega_cryptor always creates the three files.
rule file_transfer:
    input:  expand(OUTPUT_PATH+'/'+PROJECT_NAME+'/{sample}/{file}.gpg', zip, sample=SAMPLES, file=FILE_BASE), filesList=CSV+"/All_files-names.txt"
    output: touch(DONE+"/filesTransferred-{dataset}.done")
    params: user=EGA_USER, pwd=EGA_PWD, tool=FTP_TRANSFER, ega_box=EGA_BOX
    log: LOGS+"/filesTransferred-{dataset}.log"
    shell:
        """
            python3 {params.tool} -i {input.filesList} -c {params.ega_box} -u {params.user} -p {params.pwd} &> {log}
        """
