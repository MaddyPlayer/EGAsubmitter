include: "conf.sk"

### rule all for EVERYTHING ###
# rule everything:

### --------Preparation part-------- ###
rule allPrep:
    input: DONE+"/allSamples.done"
    shell:
        """
            echo "All done"
        """
### Converts all the yaml files given by the user: the user must place all the files in the yaml/ folder, after filling them out
rule allYaml:
    input: expand(USER_METADATA+"/json/{what}.json", what=FILES)
    output: touch(DONE+"/yamlConversion.done")
    shell: 'echo "All .yaml files have been converted to .json"'
rule yamlConversion:
    input: yaml=USER_METADATA+"/yaml/{what}.yaml"
    output: json=USER_METADATA+"/json/{what}.json" 
    run:
        import os
        import ruamel.yaml
        import json 
        yaml = ruamel.yaml.YAML(typ='safe')
        with open(input.yaml) as yaml_in, open(output.json, "w") as json_out:
            yaml_object = yaml.load(yaml_in)
            json.dump(yaml_object, json_out, indent=1)
### ---- ###

### TODO: in theory, this rule should depend on an output done by the egacryptor portion
checkpoint buildRuns:
    input: doneYaml=DONE+"/yamlConversion.done"#, TODO egacryptor output dependency
    output: csv=SAMPLES_PATH+"/SamplesInformations.csv", done=DONE+"/buildRuns.done", samples=SAMPLES_PATH+"/Allfiles_list.txt", runs=RUNS_PATH+"/Allfiles_list.txt"
    params: path=DATASET, runType=1 # TODO given by the user?
    script: SRC_DIR + "/Runs_build.R"

### This rule will build all the {samples}.json
rule samples:
    input: csv=ancient(SAMPLES_PATH+"/SamplesInformations.csv"), doneRuns=ancient(DONE+"/buildRuns.done")
    output: done=DONE+"/samples.done"
    run:
        import json
        import csv
        primary_fields = ['alias', 'title', 'description', 'caseOrControlId', 'genderId',
        'organismPart', 'cellLine', 'region', 'phenotype', 'subjectId', 'anonymizedName', 'bioSampleId', 'sampleAge',
        'sampleDetail']
        with open(input.csv) as csv_file:
            reader = csv.DictReader(csv_file, skipinitialspace=True, delimiter=",")
            for row in reader:
                sample = row['alias']
                d = {k: v for k, v in row.items() if k in primary_fields}
                d['attributes'] = [{'tag': row['attributes.tag'], 'value': row['attributes.value']}]
                jsonString = json.dumps(d, indent=2)
                jsonFile = open(SAMPLES_PATH+"/"+sample+".json", "w")
                jsonFile.write(jsonString)
                jsonFile.close()
        open(output.done, 'a').close()

rule sub1:
    input: donebR=ancient(DONE+"/samples.done"), json=DATA+"/submission/SubmissionSubsetTemplate.json"#, #doneSamples=ancient(DONE+"/samples.done")
    output: submission=SUBMISSION_PATH+"/Submission.json", done=DONE+"/sub1.done"
    params: path=DATASET
    script: SRC_DIR+"/Submission_builder.R"
### --------Preparation part-------- ###

### --------Submission.json part-------- ###
rule submission:
    input: token=ancient("SessionToken"), json=ancient(SUBMISSION_PATH+"/Submission.json")# This is the submission file with only title and description
    params: path=EGA_URL+"/submissions"
    output: id=SUBMISSION_PATH+"/SubmissionID", done=DONE+"/submission.done"
    log: SUB_LOGS+"/Submission_info.json.log",
    shell:
        """
            token=$(cat {input.token})
            curl -H "Content-type: application/json" -H "X-Token: $token" -X POST {params.path} -d @{input.json} > {log}
            jq -r '.response.result[0].id' {log} > {output.id}
            error=($(jq -r '.header.errorCode' {log}))
            if [ "$error" -ne 1 ]; then
                echo "Submission of Submission.json failed. The reason probably is:"
                jq -r '.header.userMessage' {log}
                exit 1
            fi
            touch {output.done}
            echo "Submission.json has been submitted"
        """


# ###TODO workflow through logs and outputs

### STUDY ###
rule study:
    input: token=ancient("SessionToken"), json=USER_METADATA+"/json/Study.json", doneSub=DONE+"/submission.done", id=SUBMISSION_PATH+"/SubmissionID"
    params: path=EGA_URL#+"/submissions/"+getsubID()+"/studies"
    output: id=IDS+"/StudyID", done=DONE+"/study.done"
    log: SUB_LOGS+"/Study_submission.json.log"
    shell:
        """ 
            token=$(cat {input.token})
            path={params.path}/submissions/$(cat {input.id})/studies
            curl -H "Content-type: application/json" -H "X-Token: $token" -X POST $path -d @{input.json} > {log}
            jq -r '.response.result[0].id' {log} > {output.id}
            error=($(jq -r '.header.errorCode' {log}))
            if [ "$error" -ne 1 ]; then
                echo "Submission of Study.json failed. The reason probably is:"
                jq -r '.header.userMessage' {log}
                exit 1
            fi
            touch {output.done}
            echo "Study.json has been submitted"
        """
### --- ###

### SAMPLES ###
rule allSamples:
    input: getSample, doneStudy=DONE+"/study.done", donebR=DONE+"/buildRuns.done", file=SAMPLES_PATH+"/Allfiles_list.txt"
    output: done=DONE+"/allSamples.done"
    shell:
        """
            touch {output.done}
            echo "All samples have been submitted"
        """

### TODO: put a countdown?
rule samplesSubmission:
    input: token=ancient("SessionToken"), json=SAMPLES_PATH+"/{sample}.json", id=SUBMISSION_PATH+"/SubmissionID", doneStudy=DONE+"/study.done"
    params: path=EGA_URL#+"/submissions/"+getsubID()+"/samples"
    output: id=SAMPLES_PATH+"/IDs/{sample}_ID", done=DONE+"/samples/{sample}-sampleSubmission.done"#, out=SUB_LOGS+"/samples/{sample}.log"
    log: SUB_LOGS+"/samples/{sample}.log"
    shell:
        """
            token=$(cat {input.token})
            path={params.path}/submissions/$(cat {input.id})/samples
            curl -H "Content-type: application/json" -H "X-Token: $token" -X POST $path -d @{input.json} > {log}
            jq -r '.response.result[0].id' {log} > {output.id}
            error=($(jq -r '.header.errorCode' {log}))
            if [ "$error" -ne 1 ]; then
                echo "Submission of {wildcards.sample}.json failed. The reason probably is:"
                jq -r '.header.userMessage' {log}
                exit 1
            fi
            touch {output.done}
            echo "{wildcards.sample}.json has been submitted"
        """
### --- ###

### EXPERIMENT ###    
# rule experimentAlias:
#     input: json=USER_METADATA+"/json/Experiment.json", id=IDS+"/StudyID", input=DONE+"/study.done"
#     output: after=SUBMISSION_PATH+"/Experiment.json", done=DONE+"/experimentAlias.done"
#     run:
#         import json
#         with open(input.id) as i:
#             id = i.readline().strip()
#         with open(input.json) as file:
#             df = json.load(file)
#             df['studyId'] = id
#         with open(output.after, 'w') as json_file:
#             json.dump(df, json_file, indent=2)

# rule experiment:
#     input: json=SUBMISSION_PATH+"/Experiment.json", doneStudy=DONE+"/study.done", doneExp=DONE+"/experimentAlias.done", doneSamples=DONE+"/allSamples.done", id=SUBMISSION_PATH+"/SubmissionID", ancient(token="SessionToken")
#     params: path=EGA_URL
#     output: id=IDS+"/ExperimentID", done=DONE+"/experiment.done"
#     log: SUB_LOGS+"/Experiment_submission.json.log"
#     shell:
#         """ 
#             token=$(cat {input.token})
#             path={params.path}/submissions/$(cat {input.id})/samples
#             curl -H "Content-type: application/json" -H "X-Token: $token" -X POST $path -d @{input.json} > {log}
#             jq -r '.response.result[0].id' {log} > {output.id}
#             error=($(jq -r '.header.errorCode' {log}))
#             if [ "$error" -ne 1 ]; then
#                 echo "Submission of Study.json failed. The reason probably is:"
#                 jq -r '.header.userMessage' {log}
#                 exit 1
#             fi
#             touch {output.done}
#             echo "Experiment.json has been submitted"
#         """
# ## --- ###

# ### RUNS ###
# rule allRuns:
#     input: getRun, file=RUNS_PATH+"/Allfiles_list.txt", doneExp=DONE+"/experiment.done", doneSamples=DONE+"/allSamples.done"
#     output: done=DONE+"/allRuns.done"
#     shell:
#         """
#             touch {output.done}
#             echo "All runs have been submitted"
#         """

# rule runsAlias:
#     input: json=RUNS_PATH+"/Run_{sample}.json", id=IDS+"/ExperimentID", sample=SAMPLES_PATH+"/IDs/{sample}_ID"
#     output: after=SUBMISSION_PATH+"/runs/Run_{sample}.json"
#     run:
#         import json
#         with open(input.id) as i, open(input.sample) as s:
#             id = i.readline().strip()
#             sample = s.readline().strip()
#         with open(input.json) as file:
#             df = json.load(file)
#             df['experimentId'] = id
#             df['sampleId'] = sample
#         with open(output.after, 'w') as json_file:
#             json.dump(df, json_file, indent=2)

# rule runsSubmission:
#     input: json=SUBMISSION_PATH+"/runs/Run_{sample}.json", id=SUBMISSION_PATH+"/SubmissionID", token='SessionToken'
#     params: path=EGA_URL
#     output: info=RUNS_PATH+"/logs/Run_{sample}.log", id=RUNS_PATH+"/IDs/Run_{sample}_ID", done=DONE+"/runs/{sample}-runSubmission.done"
#     shell:
#         """
#             token=$(cat {input.token})
#             path={params.path}/submissions/$(cat {input.id})/runs
#             curl -H "Content-type: application/json" -H "X-Token: $token" -X POST $path -d @{input.json} > {log}
#             jq -r '.response.result[0].id' {log} > {output.id}
#             error=($(jq -r '.header.errorCode' {log}))
#             if [ "$error" -ne 1 ]; then
#                 echo "Submission of Run_{wildcards.sample}.json failed. The reason probably is:"
#                 jq -r '.header.userMessage' {log}
#                 exit 1
#             fi
#             touch {output.done}
#             echo "Run_{wildcards.sample}.json has been submitted"
#         """
### --- ###

# ### DAC & Policy ###
# rule dac:
#     input: USER_METADATA+"/json/DAC.json"
#     params: path=EGA_URL+"/submissions/"+getsubID()+"/dacs", token=getoken
#     output: info=SUB_LOGS+"/DAC_submission.json.log", id=IDS+"/DACID"
#     shell:
#         """ 
#             curl -H "Content-type: application/json" -H "X-Token: {params.token}" -X POST {params.path} -d @{input} > {output.info}
#             jq -r '.response.result[0].id' {output.info} > {output.id}
#             error=($(jq -r '.header.errorCode' {output.info}))
#             if [ "$error" -ne 1 ]; then
#                 echo "DAC upload failed: please, look at the log file in dataset/submission/logs to find out what happened."
#                 exit 1
#             fi
#         """
# rule policyAlias:
#     input: json=USER_METADATA+"/json/Policy.json", id=IDS+"/DACID"
#     output: after=SUBMISSION_PATH+"/Policy.json"
#     run:
#         import json
#         with open(input.id) as i:
#             id = i.readline().strip()
#         with open(input.json) as file:
#             df = json.load(file)
#             df['dacId'] = id
#         with open(output.after, 'w') as json_file:
#             json.dump(df, json_file, indent=2)
# rule policy:
#     input: SUBMISSION_PATH+"/Policy.json"
#     params: path=EGA_URL+"/submissions/"+getsubID()+"/policies", token=getoken
#     output: info=SUB_LOGS+"/Policy_submission.json.log", id=IDS+"/PolicyID"
#     shell:
#         """ 
#             curl -H "Content-type: application/json" -H "X-Token: {params.token}" -X POST {params.path} -d @{input} > {output.info}
#             jq -r '.response.result[0].id' {output.info} > {output.id}
#             error=($(jq -r '.header.errorCode' {output.info}))
#             if [ "$error" -ne 1 ]; then
#                 echo "Policy upload failed: please, look at the log file in dataset/submission/logs to find out what happened."
#                 exit 1
#             fi
#         """
# ### --- ###

# ### DATASET ###
# rule datasetAlias:
#     input: json=USER_METADATA+"/json/Dataset.json", id=IDS+"/PolicyID"
#     output: after=SUBMISSION_PATH+"/Dataset.json"
#     run:
#         import json
#         with open(input.id) as i:
#             id = i.readline().strip()
#         with open(input.json) as file:
#             df = json.load(file)
#             df['policyId'] = id
#             df['datasetTypeIds'] = [df['datasetTypeIds']]
#         with open(output.after, 'w') as json_file:
#             json.dump(df, json_file, indent=2)
# rule dataset:
#     input: SUBMISSION_PATH+"/Dataset.json"
#     params: path=EGA_URL+"/submissions/"+getsubID()+"/datasets", token=getoken
#     output: info=SUB_LOGS+"/Dataset_submission.json.log", id=IDS+"/DatasetID"
#     shell:
#         """ 
#             curl -H "Content-type: application/json" -H "X-Token: {params.token}" -X POST {params.path} -d @{input} > {output.info}
#             jq -r '.response.result[0].id' {output.info} > {output.id}
#             error=($(jq -r '.header.errorCode' {output.info}))
#             if [ "$error" -ne 1 ]; then
#                 echo "Dataset upload failed: please, look at the log file in dataset/submission/logs to find out what happened."
#                 exit 1
#             fi
#         """
# ### --- ###
# ### --------Submission part-------- ###

# ### Validation and final Submission ###
# rule validate:
#     params: path=EGA_URL+"/submissions/"+getsubID()+"?action=VALIDATE", token=getoken
#     output: info=SUBMISSION_PATH+"/validation/validation.json.log"
#     shell:
#         """
#             curl -H "X-Token: {params.token}" -X PUT {params.path} > {output.info}
#         """
# rule submit:
#     params: path=EGA_URL+"/submissions/"+getsubID()+"?action=SUBMIT", token=getoken
#     output: info=SUBMISSION_PATH+"/validation/submit.json.log"
#     shell:
#         """
#             curl -H "X-Token: {params.token}" -X PUT {params.path} > {output.info}
#         """  
# ### --- ###

# ### Logout
# rule logout:
#     params: path=EGA_URL+"/logout", token=getoken
#     shell:
#         """
#             curl -X DELETE -H “X-Token: {params.token}” {params.path}
#         """

# rule removeAll:
#     shell:
#         """

#         """











### tmp ###

# rule allFiles:
    # input: expand(SUBMISSION_PATH+"/files/{file}_{sub}_submission.json", zip, file=FILES, sub=SUBS)

# rule filesSubmission:
#     input: METADATA_PATH+"/{file}"
#     params: path=lambda wildcards: EGA_URL+"/submissions/"+getsubID()+"/"+wildcards.sub, token=getoken
#     output: touch(SUBMISSION_PATH+"/files/{file}_{sub}_submission.json")
#     shell:
#         """ 
#             curl -H "Content-type: application/json" -H "X-Token: {params.token}" -X POST {params.path} -d @{input} > {output}
#         """

### tmp ###







