include: "../snakemake/conf_encrypting-uploading.sk"

# ==========================================================================
#                             EGAsubmitter
# ==========================================================================
# This file is part of EGAsubmitter.
#
# EGAsubmitter is Free Software: you can redistribute it and/or modify it
# under the terms found in the LICENSE.rst file distributed
# together with this file.
#
# EGAsubmitter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ==========================================================================
# Author: Marco Viviani <marco.viviani@ircc.it>
# ==========================================================================
#                   Snakefile_SFTP_encrypting-uploading
# This workflow manages the file encryption using crypt4hg tool
# and their upload through SFTP to user's EGA inbox
# ==========================================================================

# Internal rule chaining does not depend on empty/PHONY target files, but we keep the last one 
# generated by running the whole pipeline for clarity, so that a ls on dataset/encrypting-uploading/logs/ will 
# clearly indicate that the encryption/upload step is finished. We also use a dummy file for the 
# file_transfer rule where the end result is on the remote sftp server.

rule all:
    input: expand(DONE + "/filesTransferred-{dataset}.done", dataset=PROJECT_NAME)
    output: DONE + "/encrypted-upload.done"
    shell:
        """
            touch {output}
            echo "All the files have been encrypted and transferred!"
        """

### Create the list file to be used for EGA cryptor: this is a workaround to avoid shell input limit
checkpoint paths:
    input: tsv = CSV + "/Samples_Information_3cols.tsv"
    output: samples = CSV + "/All_files-names.txt"
    params: path = OUTPUT_PATH_CRYPT4GH + "/" + PROJECT_NAME
    run:
        df = pd.read_csv(input.tsv, sep='\t', header=None)
        df[2] = params.path + "/" + df[0] + "/" + df[1] + ".c4gh"
        df[[2]].to_csv(output.samples, header=False, index=False, sep='\t', mode='a')

rule all_crypted:
    input: getNames
    shell:
        """
            echo 'All files have been crypted'
        """

### EGA cryptor is the tool to encrypt each file and check md5: all three files created will be uploaded to EGA
rule crypt4gh:
    input: find_R1_R2
    output: OUTPUT_PATH_CRYPT4GH + "/" + PROJECT_NAME + "/{sample}/{file}.c4gh"
    params:
        outdir = OUTPUT_PATH_CRYPT4GH + "/" + PROJECT_NAME + "/{sample}",
        key = DATA + "/ingestion.pubkey"
    log: LOGS + "/crypted/crypt4gh-" + PROJECT_NAME + "_{sample}_{file}.log"
    shell:
        """
            if [ ! -d {params.outdir} ]; then
                mkdir -p {params.outdir}
            fi
            crypt4gh encrypt --recipient_pk {params.key} < {input} > {output}
        """

rule file_transfer:
    input:  expand(OUTPUT_PATH_CRYPT4GH+'/'+PROJECT_NAME+'/{sample}/{file}.c4gh', zip, sample=SAMPLES, file=FILE_BASE), filesList=CSV+"/All_files-names.txt"
    output: touch(DONE+"/filesTransferred-{dataset}.done")
    params: user=EGA_USER, pwd=EGA_PWD, tool=SFTP_TRANSFER, ega_box=EGA_INBOX
    log: LOGS+"/filesTransferred-{dataset}.log"
    shell:
        """
            python3 {params.tool} -i {input.filesList} -c {params.ega_box} -u {params.user} -p {params.pwd} &> {log}
        """
