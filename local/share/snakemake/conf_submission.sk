# ==========================================================================
#                             EGAsubmitter
# ==========================================================================
# This file is part of EGAsubmitter.
#
# EGAsubmitter is Free Software: you can redistribute it and/or modify it
# under the terms found in the LICENSE.rst file distributed
# together with this file.
#
# EGAsubmitter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# ==========================================================================
# Author: Marco Viviani <marco.viviani@ircc.it>
# ==========================================================================
#                           conf_submission.sk
# Configuration file to be integrated with the Snakefile. It contains paths
# and functions used in the metadata submission part
# ==========================================================================

import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
ROOT = os.path.dirname(PRJ_ROOT)
### General paths
SRC_DIR=PRJ_ROOT+'/local/src'
SHR_DIR=PRJ_ROOT+'/local/share'
BIN_DIR=PRJ_ROOT+'/local/bin'
DATA=SHR_DIR+'/data'
DATASET=PRJ_ROOT+'/dataset'
LOGS=DATASET+'/logs'

### User credentials
EGA_USER= os.environ.get("EGA_USER") # EGA submission portal username 
EGA_PWD= os.environ.get("EGA_PWD")   # EGA submission portal password

### new api ###
IDP_URL='https://idp.ega-archive.org/realms/EGA/protocol/openid-connect/token'
EGA_URL='https://submission.ega-archive.org/api'
###
# EGA_URL="https://ega-archive.org/submission-api/v1"
METADATA_PATH=DATA + "/metadata"

### Folders locations::
EGA_CRYPTOR=DATASET+'/EGACryptor'
TRANSFER=DATASET+'/encrypting-uploading'
PROJECT_NAME=os.environ.get("PROJECT_NAME")
USER=DATASET+"/user_folder"
USER_METADATA=USER+"/metadata" # Path to user's metadata (.csv and filled .yaml)
SAMPLES_PATH=USER_METADATA+"/samples"
RUNS_PATH=USER_METADATA+"/runs"
SUBMISSION_PATH=DATASET+"/submission"
SUB_LOGS=SUBMISSION_PATH+"/logs"
DONE=SUB_LOGS+"/done"
IDS=SUBMISSION_PATH+"/IDs"
IDBCKUP=USER+"/SubmissionID_backup"
TEMPLATE=DATA+"/"
FILETYPE=os.environ.get("FILETYPE")
ENUMS=METADATA_PATH+"/enums"    

### lists of every submission part
FILES=["DAC",
       "Dataset",
       "Experiment",
       "Policy",
       "Study"]

### Input functions: ###
    ### -samples for json
def getJson(wildcards):
    samples = []
    import os
    buildRuns_file = USER_METADATA+"/AllSamples_list.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.allsamples
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            samples.append(line.strip())
    return samples

    ### -samples for submission
def getSample(wildcards):
    samples = []
    import os
    buildRuns_file = SAMPLES_PATH+"/Allfiles_list.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.samples
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            samples.append(line.strip())
    return samples
    
    ### -runs for submission
def getRun(wildcards):
    runs = []
    import os
    buildRuns_file = RUNS_PATH+"/Allfiles_list.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.runs
    # print("The file already exists: I will continue the runs submission!")
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            runs.append(line.strip())
    return runs


    ### -runs for BAM submission
def getBAMrun(wildcards):
    runs = []
    import os
    buildRuns_file = RUNS_PATH+"/Allfiles_list-BAM.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.runs
    # print("The file already exists: I will continue the runs submission!")
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            runs.append(line.strip())
    return runs
### ------------------------------------------------- ###

    ### -only samples
INPUT_PATH=USER_METADATA+"/Samples_Information_3cols.tsv" # path to the directory containing the samples to upload
FILEPATHS = []
with open(INPUT_PATH, "r") as f:
    FILEPATHS = f.read().splitlines()
SAMPLES=[]
for f in FILEPATHS:
    s, b, p = f.split("\t")
    SAMPLES.append(s)
EGAID_STORE=SUBMISSION_PATH+"/EGASTORE"
