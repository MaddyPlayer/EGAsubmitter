import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
ROOT = os.path.dirname(PRJ_ROOT)
SRC_DIR=PRJ_ROOT+'/local/src'
SHR_DIR=PRJ_ROOT+'/local/share'
BIN_DIR=PRJ_ROOT+'/local/bin'
DATA=SHR_DIR+'/data'
DATASET=PRJ_ROOT+'/dataset'
LOGS=DATASET+'/logs'

### /scratch
# DATASET="/scratch/trcanmed/EGAsubmitter/dataset/"
# SRC_DIR="/scratch/trcanmed/EGAsubmitter/local/src"
# BIN_DIR="/scratch/trcanmed/EGAsubmitter/local/bin"
# SHR_DIR="/scratch/trcanmed/EGAsubmitter/local/share"
# DATA=SHR_DIR+"/data"
# LOGS=DATASET+"/logs"

FTP_TRANSFER= BIN_DIR + "/ftp_transfer"

EGA_BOX="ftp.ega.ebi.ac.uk"
EGA_URL="https://ega-archive.org/submission-api/v1"
METADATA_PATH=DATA + "/metadata"

# User settings

#OS="unix"                                                                      #unix/windows
INPUT_PATH=DATASET + "/metadata_LMX_BASALE_4_5.tsv"                             #path to the directory containing the samples to upload
OUTPUT_PATH=DATA + "/EGACryptor"                                 #path to the directory to store encrypted data
EGA_CRYPTOR=BIN_DIR+"/ega-cryptor-2.0.0.jar"
DATASET_NAME="LMX_BASALE_4_5"

EGA_USER= os.environ.get("EGA_USER")     #EGA submission portal username (the user should type it before calling snakemake)
EGA_PWD= os.environ.get("EGA_PWD")     #EGA submission portal password (the user should type it before calling snakemake)


### folders locations::
USER=DATASET + "/user_folder"
USER_METADATA=USER + "/metadata" # Path to user's metadata (.csv and filled .yaml)
SAMPLES_PATH=USER_METADATA + "/samples"
RUNS_PATH=USER_METADATA + "/runs"
EXPS_PATH=USER_METADATA + "/exps"
SUBMISSION_PATH=DATASET + "/submission"
SUB_LOGS=SUBMISSION_PATH + "/logs"
DONE=SUB_LOGS + "/done"
IDS=SUBMISSION_PATH + "/IDs"


rule login:
    output: 'SessionToken'
    params: path=EGA_URL+"/login", user=EGA_USER, pwd=EGA_PWD
    log: SUB_LOGS+"/Session_info.json.log"
    shell:
        """
            curl -X POST {params.path} -d username={params.user} --data-urlencode password={params.pwd} -d loginType="submitter" > {log}
            jq -r '.response.result[0].session.sessionToken' < {log} > {output}
            error=($(jq -r '.header.errorCode' {log}))
            if [ "$error" -ne 1 ]; then
                echo "Login failed. The reason probably is:"
                jq -r '.header.userMessage' {log}
                exit 1
            fi
            echo "You are logged in"
        """

### lists of every submission part
FILES=["DAC",
       "Dataset",
       "Experiment",
       "Policy",
       "Study"]

### functions: ------------------------------------- ###
    ### -samples for json
def getJson(wildcards):
    samples = []
    import os
    buildRuns_file = USER_METADATA+"/AllSamples_list.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.allsamples
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            samples.append(line.strip())
    return samples

    ### -samples for submission
def getSample(wildcards):
    samples = []
    import os
    buildRuns_file = SAMPLES_PATH+"/Allfiles_list.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.samples
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            samples.append(line.strip())
    return samples
    
    ### -runs
def getRun(wildcards):
    runs = []
    import os
    buildRuns_file = RUNS_PATH+"/Allfiles_list.txt"
    if not os.path.isfile(buildRuns_file):
        buildRuns_file = checkpoints.buildRuns.get().output.runs
    # print("The file already exists: I will continue the runs submission!")
    with open(buildRuns_file, 'r') as run:
        for line in run.readlines():
            runs.append(line.strip())
    return runs

    ### -experiments 
# def getExps(wildcards):
#     exps = []
#     import os
#     buildRuns_file = RUNS_PATH+"/AllExps_list.txt"
#     if not os.path.isfile(buildRuns_file):
#         buildRuns_file = checkpoints.buildRuns.get().output.exps
#     # print("The file already exists: I will continue the runs submission!")
#     with open(buildRuns_file, 'r') as run:
#         for line in run.readlines():
#             exps.append(line.strip())
#     return exps 
### ------------------------------------------------- ###
### Logout
rule logout:
    params: path=EGA_URL+"/logout", token='SessionToken'
    shell:
        """
            curl -X DELETE -H “X-Token: {params.token}” {params.path}
        """


rule delete_submission:
    shell:
        """
            while true; do
                read -p "Are you sure you want to delete all files in submission folder? This will probably restart the whole pipeline" yn
                case $yn in
                    [Yy]* ) find submission/ -type f -delete; echo "All files have been deleted"; break;;
                    [Nn]* ) exit;;
                    * ) echo "Please, answer y|yes or n|no.";;
                esac
            done
        """

rule delete_data:
    shell:
        """
            rm user_folder/metadata/AllSamples_list.txt user_folder/metadata/samples/* user_folder/metadata/samples/IDs/* user_folder/metadata/runs/* user_folder/metadata/runs/IDs/* user_folder/metadata/json/*
            rm user_folder/metada/description user_folder/metadata/title
            # rm user_folder/metadata/AllExps_list.txt
        """


### Get all the values association - DONE, but keep it TODO: implement this in the script? mor let the user look at the list and write the number?
# rule enumsAll:
#     input: expand(ENUMS_PATH+"/{enums}_association_list.txt", enums=ENUMS)
# rule enums:
#     params: path=lambda wildcards: EGA_URL+"/enums/"+wildcards.enums
#     output: ENUMS_PATH+"/{enums}_association.json"
#     shell:
#         """
#             curl -X GET {params.path} > {output}
#         """
# rule enumsConversion:
#     input: ENUMS_PATH+"/{enums}_association.json"
#     output: ENUMS_PATH+"/{enums}_association_list.txt"
#     script: SRC_DIR+"/enums.R"
### -------- ###
# ENUMS_PATH=METADATA_PATH + "/enums"
# ENUMS=["analysis_file_types", "analysis_types", "case_control", "dataset_types", "experiment_types",
# "file_types", "genders", "instrument_models", "library_selections", "library_sources", "library_strategies",
# "reference_chromosomes", "reference_genomes", "study_types"]
